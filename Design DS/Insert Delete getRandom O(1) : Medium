class RandomizedSet {
public:
    unordered_map<int,int> m;
    // set<int> s;
    vector<int> v;
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        // Insert in the map and vector
        if(m.find(val) == m.end()){
            m[val] = v.size();
            v.push_back(val);
            return true;
        }
        return false;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(m.find(val) == m.end())
            return false;
        
        // Remove from map
        int Idx = m[val];
        
        
        // Remove from vector
        // swap with last element
        // v[Idx] = v[v.size()-1];
        swap(v[Idx], v[v.size()-1]);
        
        // Update the map
            m[v[Idx]] = Idx;
        
        v.pop_back();
        m.erase(val);
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
         int randIdx = rand()%(v.size());
        
        return v[randIdx];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
