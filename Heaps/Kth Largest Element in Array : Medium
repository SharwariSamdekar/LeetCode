class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        // Brute Force approach
        // sort(nums.begin(), nums.end());
        // return nums[nums.size()-k];
        
        // 2nd approach is use Max-Heaps and delete k elements
        priority_queue<int> MaxHeap(nums.begin(), nums.end());
    
        while(--k){
            MaxHeap.pop(); // Delete
        }
        
        return MaxHeap.top();
        
        // 3rd Approach Min-heap
        priority_queue<int,vector<int>,greater<int>> pq;
        // arguments int, container of type vector and a functor
        
        int i, n =nums.size();
        for(i = 0; i <k; i++){
            pq.push(nums[i]);
        }
        
        for(i = k; i < n; i++){
            if(pq.top() < nums[i]){
                pq.pop();
                pq.push(nums[i]);
            }
        }
        
        return pq.top();
    }
};
