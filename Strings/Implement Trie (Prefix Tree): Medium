class Trie {
public:
    
    struct trieNode{
    trieNode(){
        isWord = false;
        for(int i = 0; i < 26; i++) next[i] = NULL;
    }
        bool isWord;
        trieNode* next[26];
    };
    /** Initialize your data structure here. */
    trieNode* root;
    trieNode dummy;
    Trie() {
        root = &dummy;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        trieNode*temp = root;
        for(auto c:word){
            if(!temp->next[c-'a'])
                temp->next[c-'a'] = new trieNode();
            temp = temp->next[c-'a'];
            
        }
        temp->isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        trieNode* temp = root;
        for(auto c: word){
            if(!temp->next[c-'a']) 
                return false;
            temp = temp->next[c-'a']; 
        }
        
        return temp->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        trieNode*temp = root;
        for(auto c: prefix){
            if(!temp->next[c-'a']) 
                return false;
            temp = temp->next[c-'a']; 
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
