class Solution {
public:
    
//     vector<int> buildLPS(string needle){
//         int i = 1, n = needle.size();
//         vector<int> lps(n,0);
//         lps[0] = 0;
        
//         for(; i<n; i++){
//             if(needle[i] == lps[i-1])
//                 lps[i] = lps[i-1] + 1;
//             else if(needle[i] == lps[0])
//                 lps[i] = 1;
//             else
//                 lps[i] = 0;
//         }
//         return lps;
//     }
    
    vector<int> buildLPS(string s){
        int n = s.size();
        vector<int> lps(n,0);
        int j=0,i=1;
        while(i < n){
            if(s[i] == s[j]){
                j++;
                lps[i] = j;
                i++;
            }
            else{
                if(j == 0){
                    lps[i] = 0;
                    i++;
                }
                else{
                    j = lps[j-1];
                }
            }
        }
        return lps;
    }
    
    int strStr(string haystack, string needle) {
        // KMP application 
        // Finding the pattern in the word
        int n= haystack.size(), m = needle.size();
        if(m == 0) return 0;
        
        vector<int> lps = buildLPS(needle);
        int i = 0, j = 0;
    
        while(i < n){
            // compare both elements if equal then move to next iteration
            if(haystack[i] == needle[j]){
                i++;
                j++;
                // terminating condition
                if(j == m)
                    return i - m;
            }
            // else
            // if j==0 i++; lps[i] = 0;
            else if(j == 0)
                i++;
            else if(j != 0)
                j = lps[j-1];
            // if j != 0 j = lps[j-1];
        }
        // if(j == m)
        //     return i - m;
        return -1;
    }
};
