class Solution {
public:
    struct node{
        int val = -1;
    };
    int lengthOfLongestSubstring(string s) {
        int maxlen = 0;
        unordered_map<char,node> umap;
        
        for(int right = 0, left = 0; right < s.length(); right++){
            // Update left and right ptr
            if(umap[s[right]].val != -1){
                left = max(left,umap[s[right]].val + 1);
            }
            // Update the map
            umap[s[right]].val = right;
            // Calculate length til now - Local and global length
            maxlen = max(maxlen,right-left+1);
        }
        
        return maxlen;
    }
};
