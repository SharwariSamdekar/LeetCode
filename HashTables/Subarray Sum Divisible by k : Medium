class Solution {
public:
    int subarraysDivByK(vector<int>& A, int K) {
        int n = A.size(), j, cumSum = 0, r3, res = 0;
        // Key -> remainder that prefix sum gives on division with k
        // value -> count
        unordered_map<int,int> m;
        unordered_map<int,int> :: iterator it1,it2,it3;
        m[0] = 1;
        // Negative Approach
//         for(j = 0; j < n; j++){
//             cumSum += A[j];
            
//             r3 = cumSum % K;
//             // r3 - r2 = 0, k, -k
//             // r2 -> r3, k+r3, r3-k
//             it1 = m.find(r3);
//             it2 = m.find(K+r3);
//             it3 = m.find(r3-K);
            
//             if(it1 != m.end())
//                 res += it1->second;
            
//             if(it2 != m.end())
//                 res += it2->second;
            
//             if(it3 != m.end())
//                 res += it3->second;
            
//             // Put this remainder in map
//             m[r3]++;
            
//         }
        
        // Positive approach
        
        for(j = 0; j < n; j++){
            cumSum += A[j];
            
            r3 = cumSum % K;
            
            if(r3 <0) r3 += K;
                
            res += m[r3];
            
            m[r3]++;
        }
        
        // Another approach
        
        return res;
    }
};
