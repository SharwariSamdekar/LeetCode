/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void dfs(TreeNode* node, vector<int> &op, int &index, vector<int> &voyage){
        if(node != NULL){
            if(node->val != voyage[index++]){
                op.clear();
                op.push_back(-1);
                return;
            }
            
            if(index < voyage.size() && node->left != NULL && node->left->val != voyage[index]){
                op.push_back(node->val);
                dfs(node->right, op, index, voyage);
                dfs(node->left, op, index, voyage);
            }
            else{
                dfs(node->left, op, index, voyage);
                dfs(node->right, op, index, voyage);
            }
        }
    }
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {
        
        vector<int> op;
        int index = 0;
        
        dfs(root, op, index, voyage);
        
        if(!op.empty() && op[0] == -1){
            op.clear();
            op.push_back(-1);
        }
        
        return op;
        
        
        
    }
};
