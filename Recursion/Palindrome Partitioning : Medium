class Solution {
public:
    
    bool isPalindrome(string &s, int start, int end){
        while(start <= end && s[start] == s[end]){
            start++;
            end--;
        }
        if(start > end) return true;
        return false;
    }
    
    void partitionHelper(string &s, int startIdx, vector<string> &currSet, vector<vector<string>> &res){
        int n = s.size();
        // Base Step
         if(startIdx == n){
             res.push_back(currSet);
             return;
         }
        
        // Recursive Step
        int i;
        string subS="";
        for(i = startIdx; i < n; i++){
            subS += s[i];
            if(isPalindrome(s, startIdx,i)){
                // Valid position for current partition
                currSet.push_back(subS);
                partitionHelper(s, i+1, currSet, res);
                currSet.pop_back();
            }
        }
        
    }
    
    vector<vector<string>> partition(string s) {
        vector<string> currSet;
        vector<vector<string>> res;
        
        partitionHelper(s, 0, currSet, res);
        return res;
    }
};
