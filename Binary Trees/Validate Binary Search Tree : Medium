/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    bool isBst(TreeNode* node, long int *prevVal){
//         // Base Case
        if(node == NULL) return true;
        // Recursive Case
        if(!isBst(node->left, prevVal)) return false;
        if(*prevVal != -2147483649 && *prevVal >= node->val) return false;
        *prevVal = node->val;
        if(!isBst(node->right,prevVal)) return false;
        return true;
    }
    TreeNode* prev = NULL;
    
    bool isValid(TreeNode* curr){
        // Base Case
        if(curr == NULL) return true;
        
        // Recursive Step
        if(!isValid(curr->left)) return false;
        if(prev != NULL && prev->val >= curr->val) return false;
        prev = curr;
        if(!isValid(curr->right)) return false;
        return true;
    }
    
    bool isValidBST(TreeNode* root) {
        long int prevVal = -2147483649;
        return isBst(root, &prevVal);
    }
};
