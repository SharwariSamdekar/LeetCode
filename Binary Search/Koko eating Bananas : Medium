class Solution {
public:
    
    int getSum(vector<int> &piles, int divisor){
        
        int i,totSum = 0;
        for(i=0; i<piles.size(); i++){
            totSum += ceil((float)piles[i]/divisor);
        }
        return totSum;
    }
    
    
    int minEatingSpeed(vector<int>& piles, int H) {
        //minimum divisor problem such that sum <= H
        //take ceil
        //SS : 1 to max(piles)
        
        //1.Prepare Search Space
        
        int n = piles.size(),maxN = INT_MIN,i;
        
        for(i = 0; i <n; i++)
            maxN = max(maxN,piles[i]);
        
        //2.Predicate Framework
        //FFFTTTT
        //P(x) : sum <= Th, first T
        
        
        
        int lo = 1, hi = maxN, mid;
        
        while(lo < hi){
            
            mid = lo + (hi - lo)/2;
                
            if(getSum(piles,mid) <= H)
                hi = mid;
            else
                lo = mid + 1;
        }
        return lo;
        
    }
};
