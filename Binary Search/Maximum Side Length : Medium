class Solution {
public:
    void prefixSum(vector<vector<int>>& psum){
        int i,j,r=psum.size(),c=psum[0].size();
        int rsum = 0,e = 0;
        for(i = 0; i < r; i++){
            rsum = 0;
            for(j = 0; j < c; j++){
                e = psum[i][j];
                if(i-1 < 0)
                    psum[i][j] += rsum;
                else{
                    psum[i][j] += psum[i-1][j] + rsum;
                }
                rsum += e;
            }
        }
    }
    
    int getSum(vector<vector<int>> &mat, int i, int j, int mid){
        int s = 0;
        if(i - mid > 0 && j - mid > 0)
            s = mat[i][j] - mat[i][j-mid]-mat[i-mid][j]+mat[i-mid][j-mid];
        else if(i - mid < 0 && j - mid > 0)
            s = mat[i][j] - mat[i][j-mid];
        else if(i - mid > 0 && j - mid < 0)
            s = mat[i][j] - mat[i-mid][j];
        else
            s = mat[i][j];
        return s;
    }
    int maxSideLength(vector<vector<int>>& mat, int threshold) {
        //Optimization problem. x = side length of square
        //max f(x) = sum(length = x) f(x) <= threshold first T
        //use prefixsum to reduce time for calculating sum
        int c = mat[0].size(),r = mat.size();
        int i, j,s;
        prefixSum(mat);
        
        //To get sum of any square p(i)(j) -= p(i,j-length)-p(i-length,j)+p(i-length,j-length)
        //Fixing one corner as bottom right, apply binary search on length
        int lo,hi,mid,maxlen = 0;
        for(i = 0; i < r; i++){
            for(j = 0; j < c; j++){
                lo = 1;
                hi = min(i+1,j+1);
                while(lo < hi){
                    mid = lo + (hi - lo + 1)/2;
                        
                    
                    if(getSum(mat,i,j,mid) > threshold)
                        hi = mid - 1;
                    else
                        lo = mid;
                
                }
                // cout<<"sum = "<<getSum(mat,i,j,lo)<<"  len = "<<lo;
                if(getSum(mat,i,j,lo) <= threshold)
                    maxlen = max(lo,maxlen);
            }
        }
        return maxlen;
    }
};
