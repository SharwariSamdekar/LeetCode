class Solution {
public:
    int search(vector<int>& nums, int target) {
        //First lets find out index of minimum
        //FFFFTTTT
        //P(x) : x < A[0], First T
        
        int n = nums.size(),lo = 0, hi = n-1, mid;
        
        if(n == 0)
            return -1;
        
        while(lo < hi){
            mid = lo + (hi - lo)/2;
            
            if(nums[mid] < nums[0])
                hi = mid;
            else
                lo = mid + 1;
        }
        
        int index = 0;
        if(nums[0] > nums[lo])
            index = lo;
        else
            lo = 0;
        // cout<<lo;
        hi = n-1;
        if(target >= nums[lo] && target <= nums[hi]){
            while(lo < hi){
                mid = lo + (hi - lo + 1)/2;
                    
                if(nums[mid] > target)
                    hi = mid - 1;
                else
                    lo = mid;
            }
            // cout<<lo;
            if(nums[lo] != target)
                return -1;
        }
        
        else{
            lo = 0;
            hi = index -1;
            while(lo < hi){
                mid = lo + (hi - lo + 1)/2;
                
                if(nums[mid] > target)
                    hi = mid - 1;
                else
                    lo =  mid;
            }
            if(nums[lo] != target)
                return -1;
        }
        return lo;
    }
};
