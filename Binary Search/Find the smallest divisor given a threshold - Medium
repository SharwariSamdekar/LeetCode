class Solution {
public:
    
    
    int getSum(vector<int> &nums, int divisor){
        int n = nums.size(), i, totSum = 0;
        for(i =0; i < n; i++){
            totSum += ceil((float)nums[i]/divisor);
        }
        
        return totSum;
    }
    
    
    int smallestDivisor(vector<int>& nums, int threshold) {
        //Optimization problem
        //Tried to model it as search problrm
        //SS : 1 to max(numx[i]) 
        
        
        //1. Prepare the SS
        //Find the maximum
        int n = nums.size(),maxN = INT_MIN,i;
        
        for(i = 0; i < n; i++){
            maxN = max(maxN, nums[i]);
        }
        
        //2. Code predicate Framework
        //FFFFTTTTT
        // P(x) <= threshold First T
        int lo = 1, hi = maxN,mid;
        
        while(lo < hi){
            mid = lo + (hi - lo)/2;
            
            //Decision
            if(getSum(nums,mid) <= threshold)
                hi = mid;
            else
                lo = mid + 1;
        }
        
        //Sanity Check - I do not think it is needed
        return lo;
    }
};
