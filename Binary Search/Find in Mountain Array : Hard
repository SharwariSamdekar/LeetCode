/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index);
 *     int length();
 * };
 */

class Solution {
public:
    int findInMountainArray(int target, MountainArray &mountainArr) {
        //search for the peak. If element is greater than peak then return -1. else 
        //binary search in two parts of array.
        
        //Find peak index
        //FFFFTTTT
        // p(X) : A[mid] > A[mid + 1], First T
        int n = mountainArr.length(), lo = 0, hi = n-1, mid;
        
        while(lo < hi){
            mid = lo + (hi -lo)/ 2;
                
            if(mountainArr.get(mid)> mountainArr.get(mid+1))
                hi = mid;
            else
                lo = mid + 1;
        }
        
        //Sanity Check : No need
        int index = lo;
        // cout<<index;
        
        //Check if element is greater than peak?
        if(target > mountainArr.get(index))
            return -1;
        if(target == mountainArr.get(index))
            return index;
        
        //Search in first half
        //FFTTT 
        //P(x) : A[mid] >= target, first T
        lo = 0;
        hi = index - 1;
        while(lo < hi){
            mid = lo + (hi - lo)/2;
               
             if(mountainArr.get(mid) >= target)
                hi = mid;
            else
                lo = mid + 1;
            
        }
        // cout<<lo;
        if(mountainArr.get(lo) == target)
            return lo;
        
        //Search in second half
        //FFTTT
        lo = index + 1;
        hi = n-1;
        while(lo < hi){
              mid = lo + (hi - lo)/2;
               
             if(mountainArr.get(mid) <= target)
                hi = mid;
            else
                lo = mid + 1;
        }
        // cout<<lo;
        
        if(mountainArr.get(lo) != target)
            return -1;
        return lo;
        
    }
};
